import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:rvs/linedheading_widget.dart';

import '../../global_data.dart';
import '../../util.dart';
import '../../vulnerability_element.dart';
import '../survey_data.dart';

class VulnerabilityInput extends StatefulWidget {
  const VulnerabilityInput({super.key});

  @override
  State<VulnerabilityInput> createState() => _VulnerabilityInputState();
}

class _VulnerabilityInputState extends State<VulnerabilityInput> {
  int surveyNumber = 1;
  List<VulnElement> formVulnElements = [];

  @override
  void initState() {
    surveyNumber = GetIt.I<GlobalData>().surveyNumber;
    formVulnElements = getFormVulnElements(possibleElements, surveyNumber);
    super.initState();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
  }

  List<Widget> getFormVulnWidgets(List<VulnElement> elements, bool isLife) {
    List<Widget> res = [];
    for (int i = 0; i < elements.length; i++) {
      VulnElement e = elements[i];
      if (e.runtimeType == VulnHeading) {
        e = e as VulnHeading;
        if (e.big) {
          res.add(const Placeholder());
          res.add(const SizedBox(height: 20));
          res.add(
            Text(
              e.text,
              textAlign: TextAlign.center,
              style: Theme.of(context).textTheme.headline6!.copyWith(
                    fontWeight: FontWeight.bold,
                    fontStyle: FontStyle.italic,
                  ),
            ),
          );
          res.add(const SizedBox(height: 10));
          res.add(
            Padding(
              padding: const EdgeInsets.fromLTRB(15, 7, 17, 0),
              child: Row(
                children: [
                  Expanded(flex: 5, child: Container()),
                  Expanded(
                    flex: 1,
                    child: Text(
                      "Yes",
                      textAlign: TextAlign.center,
                      style: Theme.of(context).textTheme.caption,
                    ),
                  ),
                  Expanded(
                    flex: 1,
                    child: Text(
                      "No",
                      textAlign: TextAlign.center,
                      style: Theme.of(context).textTheme.caption,
                    ),
                  ),
                ],
              ),
            ),
          );
        } else {
          res.add(const SizedBox(height: 20));
          res.add(
            Align(
              alignment: Alignment.topLeft,
              child: Text(
                e.text,
                style: Theme.of(context).textTheme.labelLarge,
                textAlign: TextAlign.left,
              ),
            ),
          );
          // res.add(const SizedBox(height: 10));
        }
      } else if (e.runtimeType == VulnQuestion) {
        e = e as VulnQuestion;
        res.add(dataCheckboxListTile(i, e.text, e.color));
      }
    }
    return res;
  }

  Icon getVulnSelectionIcon(bool? val) {
    if (val == true) {
      return Icon(Icons.check, color: Colors.lightGreen[600]);
    } else if (val == false) {
      return const Icon(Icons.close, color: Colors.red);
    } else {
      return const Icon(Icons.drag_indicator);
    }
  }

  // swipe action
  // Widget dataCheckboxListTile(int index, String text, VulnColor color) {
  //   // to add color
  //   // int shade = (isDarkTheme(context)) ? 300 : 800;
  //   // Color boxColor = (color == VulnColor.red) ? Colors.red[shade]! : Colors.yellow[shade]!;
  //   return Dismissible(
  //     key: UniqueKey(),
  //     background: Container(
  //       color: Colors.green,
  //       child: const Align(
  //         alignment: Alignment.centerLeft,
  //         child: Padding(
  //           padding: EdgeInsets.all(16.0),
  //           child: Icon(Icons.check),
  //         ),
  //       ),
  //     ),
  //     secondaryBackground: Container(
  //       color: Colors.red,
  //       child: const Align(
  //         alignment: Alignment.centerRight,
  //         child: Padding(
  //           padding: EdgeInsets.all(16.0),
  //           child: Icon(Icons.close),
  //         ),
  //       ),
  //     ),
  //     confirmDismiss: (dismissDirection) {
  //       if (dismissDirection == DismissDirection.startToEnd) {
  //         setState(() {
  //           GetIt.I<SurveyData>().vulnCheckboxes[index] = true;
  //         });
  //       }
  //       if (dismissDirection == DismissDirection.endToStart) {
  //         setState(() {
  //           GetIt.I<SurveyData>().vulnCheckboxes[index] = false;
  //         });
  //       }
  //       return Future(() => false);
  //     },
  //     child: ListTile(
  //       leading: GestureDetector(
  //         onTap: null,
  //         child: getVulnSelectionIcon(GetIt.I<SurveyData>().vulnCheckboxes[index]),
  //       ),
  //       title: Text(
  //         text,
  //         style: Theme.of(context).textTheme.caption!.copyWith(fontSize: 13),
  //       ),
  //     ),
  //   );
  // }

  // Checkbox Tiles
  // Widget dataCheckboxListTile(int index, String text, VulnColor color) {
  //   return CheckboxListTile(
  //     // to add color
  //     // side: BorderSide(
  //     //   color: boxColor,
  //     //   width: 2,
  //     // ),
  //     // activeColor: boxColor,
  //     tristate: true,
  //     value: GetIt.I<SurveyData>().vulnCheckboxes[index],
  //     onChanged: (val) {
  //       setState(() {
  //         GetIt.I<SurveyData>().vulnCheckboxes[index] = val;
  //       });
  //     },
  //     dense: true,
  //     contentPadding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
  //     title: Text(
  //       text,
  //       style: Theme.of(context).textTheme.caption!.copyWith(fontSize: 13),
  //     ),
  //   );
  // }

  // gets the index as if in a list only made of VulnQuestions (like the explanation list)
  int getParameterDefinitionNumber(int eleIndex) {
    int defIndex = eleIndex;
    for (var i = 0; i < eleIndex; i++) {
      if (formVulnElements[i].runtimeType == VulnHeading) {
        defIndex--;
      }
    }
    return defIndex + 1;
  }

  Widget dataCheckboxListTile(int index, String text, VulnColor color) {
    return ListTile(
      onLongPress: () {
        int parameterDefinitionNumber = getParameterDefinitionNumber(index);
        String explanationName = "Form ${surveyNumber + 1}A-Definition $parameterDefinitionNumber";
        greenDBG(explanationName);
        Navigator.pushNamed(context, "/explanation", arguments: explanationName);
      },
      // to add color
      // side: BorderSide(
      //   color: boxColor,
      //   width: 2,
      // ),
      // activeColor: boxColor,
      dense: true,
      // contentPadding: const EdgeInsets.fromLTRB(20, 20, 20, 0),
      title: Row(
        children: [
          Expanded(
            flex: 5,
            child: Padding(
              padding: const EdgeInsets.fromLTRB(8, 0, 8, 8),
              child: Text(
                text,
                // style: Theme.of(context).textTheme.caption!.copyWith(fontSize: 13),
                style: Theme.of(context).textTheme.bodyText2!.copyWith(fontSize: 12),
              ),
            ),
          ),
          Expanded(
            flex: 1,
            child: Radio(
              visualDensity: VisualDensity.compact,
              fillColor: MaterialStateProperty.all(Colors.lightGreen),
              value: true,
              groupValue: GetIt.I<SurveyData>().vulnCheckboxes[index],
              onChanged: (val) {
                GetIt.I<SurveyData>().vulnCheckboxes[index] = val;
                setState(() {});
              },
            ),
          ),
          Expanded(
            flex: 1,
            child: Radio(
              visualDensity: VisualDensity.compact,
              fillColor: MaterialStateProperty.all(Colors.red),
              value: false,
              groupValue: GetIt.I<SurveyData>().vulnCheckboxes[index],
              onChanged: (val) {
                GetIt.I<SurveyData>().vulnCheckboxes[index] = val;
                setState(() {});
              },
            ),
          ),
        ],
      ),
    );
  }

  List<Widget> addCards(List<Widget> widgets) {
    List<int> cardIndices = [];
    for (int i = 0; i < widgets.length; i++) {
      Widget w = widgets[i];
      if (w.runtimeType == Placeholder) {
        cardIndices.add(i);
      }
    }

    List<Widget> res = [];
    for (int i = 0; i < cardIndices.length; i++) {
      List<Widget> childs;
      if (!(i == cardIndices.length - 1)) {
        childs = widgets.sublist(cardIndices[i], cardIndices[i + 1]);
      } else {
        childs = widgets.sublist(cardIndices[i]);
      }
      childs.removeAt(0);
      res.add(
        ClipRRect(
          borderRadius: cardBorderRadius,
          child: Container(
            color: Theme.of(context).cardColor,
            child: Column(
              children: childs,
            ),
          ),
        ),
      );
      res.add(const SizedBox(height: 20));
    }
    return res;
  }

  buildVulnerability() {
    return Column(
      children: [
        Text(
          "Click the green circle mark a parameter as applicable.\nClick the red circle a parameter as not applicable.",
          style: Theme.of(context).textTheme.bodyText2,
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 30),
        Text(
          "Long press on any tile to view a detailed explanation of the parameter.",
          style: Theme.of(context).textTheme.bodyText2,
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 30),
        ...addCards(getFormVulnWidgets(formVulnElements, true)),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return buildVulnerability();
  }
}
