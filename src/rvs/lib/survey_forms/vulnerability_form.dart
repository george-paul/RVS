import 'package:rvs/global_data.dart';
import 'package:rvs/survey_forms/survey_data.dart';
import 'package:rvs/vulnerability_element.dart';
import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';

import '../util.dart';

class VulnerabilityForm extends StatefulWidget {
  const VulnerabilityForm({Key? key}) : super(key: key);

  @override
  // ignore: library_private_types_in_public_api
  _VulnerabilityFormState createState() => _VulnerabilityFormState();
}

class _VulnerabilityFormState extends State<VulnerabilityForm> with AutomaticKeepAliveClientMixin {
  @override
  bool get wantKeepAlive => true;

  int surveyNumber = 1;
  List<VulnElement> formVulnElements = [];

  @override
  void initState() {
    surveyNumber = GetIt.I<GlobalData>().surveyNumber;
    formVulnElements = getFormVulnElements(possibleElements, surveyNumber);
    super.initState();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
  }

  List<Widget> getFormVulnWidgets(List<VulnElement> elements, bool isLife) {
    List<Widget> res = [];
    for (int i = 0; i < elements.length; i++) {
      VulnElement e = elements[i];
      if (e.runtimeType == VulnHeading) {
        e = e as VulnHeading;
        if (e.big) {
          res.add(const Placeholder());
          res.add(
            Text(
              e.text,
              textAlign: TextAlign.center,
              style: Theme.of(context).textTheme.headline6!.copyWith(fontStyle: FontStyle.italic),
            ),
          );
          res.add(const SizedBox(height: 20));
        } else {
          res.add(const SizedBox(height: 20));
          res.add(
            Align(
              alignment: Alignment.topLeft,
              child: Text(
                e.text,
                style: Theme.of(context).textTheme.labelLarge,
                textAlign: TextAlign.left,
              ),
            ),
          );
          // res.add(const SizedBox(height: 10));
        }
      } else if (e.runtimeType == VulnQuestion) {
        e = e as VulnQuestion;
        res.add(dataCheckboxListTile(i, e.text, e.color));
      }
    }
    return res;
  }

  Widget dataCheckboxListTile(int index, String text, VulnColor color) {
    int shade = (isDarkTheme(context)) ? 300 : 800;
    // to add color
    // Color boxColor = (color == VulnColor.red) ? Colors.red[shade]! : Colors.yellow[shade]!;
    return CheckboxListTile(
      // to add color
      // side: BorderSide(
      //   color: boxColor,
      //   width: 2,
      // ),
      // activeColor: boxColor,
      value: GetIt.I<SurveyData>().vulnCheckboxes[index],
      onChanged: (val) {
        setState(() {
          GetIt.I<SurveyData>().vulnCheckboxes[index] = val!;
        });
      },
      dense: true,
      contentPadding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
      title: Text(
        text,
        style: Theme.of(context).textTheme.caption!.copyWith(fontSize: 13),
      ),
    );
  }

  List<Widget> addCards(List<Widget> widgets) {
    List<int> cardIndices = [];
    for (int i = 0; i < widgets.length; i++) {
      Widget w = widgets[i];
      if (w.runtimeType == Placeholder) {
        cardIndices.add(i);
      }
    }

    List<Widget> res = [];
    for (int i = 0; i < cardIndices.length; i++) {
      List<Widget> childs;
      if (!(i == cardIndices.length - 1)) {
        childs = widgets.sublist(cardIndices[i], cardIndices[i + 1]);
      } else {
        childs = widgets.sublist(cardIndices[i]);
      }
      childs.removeAt(0);
      res.add(
        Card(
          shape: const RoundedRectangleBorder(borderRadius: cardBorderRadius),
          child: Padding(
            padding: const EdgeInsets.all(20),
            child: Column(
              children: childs,
            ),
          ),
        ),
      );
      res.add(const SizedBox(height: 20));
    }
    return res;
  }

  @override
  Widget build(BuildContext context) {
    super.build(context);
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            const SizedBox(height: 10),
            Text(
              "Vulnerability Parameters",
              style: Theme.of(context).textTheme.headline5!.copyWith(fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 30),
            ...addCards(getFormVulnWidgets(formVulnElements, true)),
          ],
        ),
      ),
    );
  }
}
